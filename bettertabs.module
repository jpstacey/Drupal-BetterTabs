<?php

/**
 * @file BetterTabs
 */

/**
 * Implementation of hook_block
 */
function bettertabs_block($op = 'list', $delta = 0, $edit = array()) {
  switch($op) {
    case 'list':
      $conf = bettertabs_conf_tabs();
      foreach($conf as $k => $v) {
        $blocks[$k] = array(
          'info' => t("BetterTabs @k", array("@k" => $k)),
        );
      }
      return $blocks;
    break;
    case 'view':
      switch($delta) {
        default:
          $block['subject'] = t("Links");
          $block['content'] = bettertabs_content($delta);
          return $block;
        break;
      }
    break;
  }
}

/**
 * Implementation of hook_preprocess_node
 */
function bettertabs_preprocess_node(&$vars) {
  static $data;

  if ($vars['page']) {
    if (variable_get('bettertabs_taxonomy', FALSE)) {
      $data['taxonomy_links'] = $vars['taxonomy'];
      $data['taxonomy'] = $vars['node']->taxonomy;
      unset($vars['taxonomy']);
    }
    if (variable_get('bettertabs_links', FALSE)) {
      $data['links'] = $vars['node']->links;
      unset($vars['links']);
    }

  }

  return $data;
}

/**
 * Implementation of hook_preprocess_page
 */
function bettertabs_preprocess_page(&$vars) {
  global $bettertabs_is_rendered;
  if (!$bettertabs_is_rendered) { return; }

  // Need to check block will be instantiated
  if (variable_get('bettertabs_tabs', TRUE)) {
    unset($vars['tabs']);
  }
}


/**
 * Get content for block
 */
function bettertabs_content($conf_key) {
  $sections = array(

    'categories' => array(
      'title' => t('Categories'),
    ),
  );

  $misc_links = array();

  // Need to have already processed a node
  $data = bettertabs_preprocess_node();

  // Tabs - hack with SimpleXML
  $tabs = simplexml_load_string("<ul>".menu_local_tasks()."</ul>");
  foreach($tabs->li as $li) {
    $datum = array(
      "href" => substr(preg_replace('/^http:\/\/[^\/]+/', '', $li->a["href"]),strlen(base_path())),
      "title" => "".$li->a,
    );
    $datum['href_system'] = drupal_lookup_path("source", $datum['href']);
    $data['primary_tabs'][] = $datum;
  }
  $tabs = simplexml_load_string("<ul>".menu_local_tasks(1)."</ul>");
  foreach($tabs->li as $li) {
    $data['secondary_tabs'][] = array(
      "href" => "".$li->a["href"],
      "title" => "".$li->a["0"],
    );
  }

  // Taxonomy terms
  foreach($data['taxonomy_links'] as $desc => $link) {
    // We could compare with $data['taxonomy'] and split by $vid...!
    $sections['categories']['links'][] = $link;
  }

  // Node links 
  // These have a description, insofar as their keys are unique
  foreach($data['links'] as $desc => $link) {
    foreach($sections as &$section) {
      if (in_array($desc, $section['link_descs'])) {
        $section['items'][] = $link;
        continue 2;
      }
    }
    $misc_links[] = $link;
  }

  // Tabs
  $tabs_conf = bettertabs_conf_tabs($conf_key);
  if (!_bettertabs_determine_visibility($tabs_conf)) { return; }

  // Count links we've put into the block
  $num_links = 0;

  // Merge sections from $tabs_conf with the $links and taxonomy above
  $sections = array_merge($sections, $tabs_conf['sections']);
  // Sometimes we don't get primary tabs!
  if (!$data['primary_tabs'] && $tabs_conf['alt_tabs']) {
    foreach($tabs_conf['alt_tabs'] as $desc => $link) {
      $data['primary_tabs'][$desc] = $link;
      // Have to abstract this bit for non-groups
      $data['primary_tabs'][$desc]['href'] = token_replace($link['href'], 'node', og_get_group_context());
    }
  }
  foreach($data['primary_tabs'] as $desc => $link) {
    $matched = FALSE;
    foreach($sections as $sec => $sec_conf) {
      // Each section config consists of many regexes - see if there's a match
      foreach ($sec_conf['regex'] as $regex) {
        $matches = preg_match("/^$regex\$/", $link['href']) + preg_match("/^$regex\$/", $link["href_system"]);
        if ($matches) {
          $matched = TRUE;
          // Should split based on regex/glob matching
          $sections[$sec]['links'][] = $link;
          $num_links++;
          break;
        }
      }
    }
    if (!$matched && variable_get('bettertabs_show_unmatched', FALSE)) {
      $misc_links[] = $link;
      $num_links++;
    }
  }

  // If we've only got one link, and we shouldn't display, just return
  if ($num_links < 2 && !$tabs_conf['visibility']['one_tab']) {
    return;
  }

  // Add misc section at the very end, with everything else in it
  $sections['misc'] = array('title' => 'Misc', 'links' => $misc_links);

  global $bettertabs_is_rendered;
  $bettertabs_is_rendered = TRUE;
  return theme('bettertabs_sections', t('Useful links'), $sections);
}

/**
 * Implementation of hook_theme
 */
function bettertabs_theme() {
  $path = drupal_get_path('module', 'bettertabs');

  return array(
    'bettertabs_sections' => array(
      'arguments' => array('title' => NULL, 'sections' => array()),
      'template' => 'bettertabs-sections',
      'path' => "$path/templates",
      'preprocess functions' => array('bettertabs_preprocess_bettertabs_sections'),
    ),
    'bettertabs_section' => array(
      'arguments' => array('class' => NULL, 'title' => NULL, 'links' => array()),
      'template' => 'bettertabs-section',
      'path' => "$path/templates",
    ),
  );
}

/**
 * Implementation of hook_preprocess_bettertabs_sections
 */
function bettertabs_preprocess_bettertabs_sections(&$vars) {
  foreach($vars['sections'] as $class => $section) {
    $section["links"] && ($vars['content'][] = theme('bettertabs_section', 
      check_plain($class), check_plain($section["title"]), $section["links"]));
  }
}

/**
 * Implementation of hook_preprocess_bettertabs_section
 */
function bettertabs_preprocess_bettertabs_section(&$vars) {
  $template_files[] = 'bettertabs-section-'.$vars['class'];
}

/**
 * Configuration - hardwired until we need it to be exposed in admin
 */
function bettertabs_conf_tabs($key = NULL) {
  $data['network'] = array(
    'visibility' => array(
      // Callback(s) to determine visibility
      'callbacks' => array('bettertabs_visibility_tabs'),
      // Show when there's one tab?
      'one_tab' => FALSE,
    ),

    'sections' => array(
      'actions' => array(
        'title' => t('Actions'),
        'regex' => array('node\/\d+', 'node\/\d+\/og_admin', 'node\/\d+\/edit', 'node\/\d+\/dashboard'),
      ),
    ),
  );

  $data['microsite'] = array(
    'visibility' => array(
      // Callback(s) to determine visibility
      'callbacks' => array(),
      // Show when there's one tab?
      'one_tab' => FALSE,
    ),

    'sections' => array(
      'actions' => array(
        'title' => t('Actions'),
        'regex' => array('node\/\d+', 'node\/\d+\/edit', 'node\/\d+\/dashboard', 'node\/\d+\/revisions', 'microsite_dashboard'),
      ),
    ),
    // Alternative tabs, for when tabs array is empty
    'alt_tabs' => array(
      array(
        'href' => 'node/[nid]/dashboard',
        'title' => 'Dashboard',
        'href_system' => 'microsite_dashboard',
      ),
      array(
        'href' => 'node/[nid]/edit',
        'title' => 'Edit',
        'href_system' => FALSE,
      ),
      array(
        'href' => 'node/[nid]/revisions',
        'title' => 'Revisions',
        'href_system' => FALSE,
      ),
    ),
  );

  if ($key) {
    return $data[$key];
  }
  return $data;
}

/**
 * Determine visibility from callbacks
 */
function _bettertabs_determine_visibility($tabs_conf) {
  // Add core vis check
  if (!$tabs_conf['visibility']['callbacks']) {
    $tabs_conf['visibility']['callbacks'] = array('_bettertabs_visibility_core');
  }

  $vis = FALSE;
  foreach($tabs_conf['visibility']['callbacks'] as $fn) {
    $vis |= (function_exists($fn) && $fn($tabs_conf));
  }
  return $vis;
}

function _bettertabs_visibility_core($conf, $url = NULL) {
  ($url === NULL) && ($url = $_GET['q']);

  $is_on_path = FALSE;
  foreach($conf['sections'] as $sec => $sec_conf) {
    foreach ($sec_conf['regex'] as $regex) {
      $matches = preg_match("/^$regex\$/", $url);
      if ($matches) {
        $is_on_path = TRUE;
        break 2;
      }
    }
  }
  return $is_on_path;
}

function bettertabs_visibility_tabs($conf) {
  $is_on_path = _bettertabs_visibility_core($conf);

  if ($is_on_path) {
    $g = og_get_group_context();
    if ($g->type == "network") { return TRUE; }
  }

}
